import pandas as pd
import os
import streamlit as st
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel
from sklearn.model_selection import train_test_split
from sklearn.neighbors import NearestNeighbors
from sklearn.metrics.pairwise import cosine_similarity

# Directory where your CSV files are stored
directory = '/Users/venkat/Documents/Final project/items list'

def load_and_concatenate_csv(directory_path):
    all_data = []
    for filename in os.listdir(directory_path):
        if filename.endswith('.csv'):
            file_path = os.path.join(directory_path, filename)
            try:
                df = pd.read_csv(file_path)
                all_data.append(df)
            except pd.errors.EmptyDataError:
                print(f"Empty DataFrame from file: {filename}")
            except FileNotFoundError:
                print(f"File not found: {filename}")
            except Exception as e:
                print(f"Error reading {filename}: {e}")

    if all_data:
        return pd.concat(all_data, ignore_index=True)
    else:
        return pd.DataFrame()  # Return an empty DataFrame if no data is found

# Load and concatenate the data
product_data = load_and_concatenate_csv(directory)


        # Check if the DataFrame is empty
if product_data.empty:
            raise ValueError("The DataFrame is empty. Please check your CSV file.")


if 'name' not in product_data.columns:
            raise ValueError("The 'name' column is missing from the dataset.")

        # Fill any missing values in the 'name' column
product_data['name'] = product_data['name'].fillna('Unknown Name')

if product_data is None or 'name' not in product_data.columns:
            raise Exception("Data loading error or 'name' column missing.")

if product_data is None:
            raise Exception("Failed to load data or data is empty.")

def preprocess_data(product_data):
    # Handle missing values
    product_data['name'] = product_data['name'].fillna('')

    # Remove duplicate entries based on the 'name' column
    product_data = product_data.drop_duplicates(subset='name')

    # Create a composite feature
    product_data['composite_text'] = product_data['name'] + ' ' + product_data['main_category'] + ' ' + product_data['sub_category']

    return product_data
file_path = '/Users/venkat/Documents/Final project/items list.csv'
product_data = pd.read_csv(file_path)

# Preprocess the data
def preprocess_data(product_data):
    product_data['name'] = product_data['name'].fillna('')
    product_data = product_data.drop_duplicates(subset='name')
    product_data['composite_feature'] = product_data['name'] + ' ' + product_data['main_category'] + ' ' + product_data['sub_category']
    return product_data

product_data = pd.read_csv('/Users/venkat/Documents/Final project/items list.csv')  # Update this path
product_data = preprocess_data(product_data)

tfidf_vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf_vectorizer.fit_transform(product_data['composite_feature'])
# Function to get recommendations 
def get_recommendations(selected_product, tfidf_matrix, num_recommendations=5):
    # Find the index of the product that matches the selected product
    idx_list = product_data.index[product_data['name'] == selected_product].tolist()

    # Check if the index list is empty
    if not idx_list:
        # Handle the scenario where the product isn't found
        return pd.DataFrame(columns=['name', 'image'])
    
    idx = idx_list[0]
    
    # Compute the cosine similarity matrix
    cosine_sim = cosine_similarity(tfidf_matrix[idx:idx+1], tfidf_matrix)

    # Get pairs of (product index, similarity score)
    sim_scores = list(enumerate(cosine_sim[0]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the indices of the most similar products
    sim_indices = [i[0] for i in sim_scores[1:num_recommendations+1]]

    # Check if the indices are in the DataFrame index
    valid_indices = [i for i in sim_indices if i in product_data.index]

    # Return the most similar products
    return product_data.loc[valid_indices, ['name', 'image']]
    
# Streamlit UI
st.title('Product Recommendation System')

# Display categories
categories = product_data['main_category'].unique()
selected_category = st.selectbox('Select a Category', categories, key='category_select')

# Product selection based on the selected category
filtered_products = product_data[product_data['main_category'] == selected_category]
if not filtered_products.empty:
    selected_product = st.selectbox('Select a Product', filtered_products['name'].unique(), key='product_select')
else:
    st.write("No products available in this category.")

# Get recommendations
if st.button('Get Recommendations'):
    recommendations = get_recommendations(selected_product, tfidf_matrix)   
    if not recommendations.empty:
        st.subheader('Recommended Products:')
        for _, row in recommendations.iterrows():
            st.write(row['name'])
            st.image(row['image'], width=200)

# User feedback
feedback = st.text_input("Feedback on Recommendations (Optional)")
if st.button("Submit Feedback"):
    st.write("Thank you for your feedback!")
